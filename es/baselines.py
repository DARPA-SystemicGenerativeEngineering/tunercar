"""
Baselines found by random searching, passes some of the tests, but have bad lqr params
"""
import numpy as np

# default control params, should be general enough to work on most cases
default_lqr = np.ones(20, )
default_latvel = np.array([10.0, 0.0, 3.0, 5.0])
default_vertvel = np.array([0.0, -2.0, 3.0, 5.0])

quad_lqr = np.array([1.0, 1.0, 1.0, 1.0, 1.0,
                     1.0, 1.0, 1.0, 1.0, 1.0,
                     0.1, 0.5, 0.1, 0.1, 0.1,
                     4.68697096, 4.68697096, 4.68697096, 4.68697096, 4.68697096])
quad_latvel = np.array([15.0, 14.0, 0.0, 29.0])
quad_vertvel = np.array([0.0, 0.0, -2.0, 0.0])

# default quad continous params
quad_arm_lengths = 600.0 * np.ones(4, )
quad_support_lengths = 120.0 * np.ones(4, )

# default quad spider continuous params
quadspider_arm_lengths = np.array([80., 80., 210., 80., 80., 210., 80., 80., 210., 80., 80., 210.])
quadspider_support_lengths = 320. * np.ones(4, )

# quad_baseline1 is highest scoring with RandomSearch seed 123
quad_baseline1 = np.array([ 2.60000000e+01,  1.70000000e+01,  5.00000000e+00,  4.00000000e+00,
                            1.00000000e+01,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                            1.00000000e+00,  2.06000000e+02,  1.06000000e+02,  1.57000000e+02,
                            2.55000000e+02,  6.00000000e+00,  3.80000000e+01,  3.80000000e+01,
                            3.10000000e+01,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,
                            0.00000000e+00,  4.83785956e+02,  3.73685013e+02,  7.56345072e+02,
                            8.72621576e+02,  2.84571354e+01,  2.60426587e+01,  6.23043247e+01,
                            9.97925992e+01,  2.45323565e+00,  1.66716652e+00,  1.95164670e+00,
                            7.94821247e-01,  4.78369637e-01,  1.42196907e+00,  1.61500806e+00,
                            1.13017873e+00,  7.65670138e-01,  1.14171064e+00,  1.76207902e+00,
                            2.00088341e+00,  1.77935201e+00,  1.31697451e+00,  2.16657834e+00,
                            1.42920867e+00,  1.75972459e+00,  1.91122897e+00,  1.87740770e+00,
                            2.38628847e+00,  6.98187913e+00,  1.20576802e+01,  1.43490932e+01,
                            1.60497639e+01,  6.63037687e-01,  1.34347446e+00, -3.19835893e+00,
                           -1.96116314e+00])
quad_scores1 = np.array([359.,  10.,  10., 349.])

# quad_baseline2 is highest scoring with RandomSearch seed 456
quad_baseline2 = np.array([ 2.60000000e+01,  1.90000000e+01,  1.30000000e+01,  0.00000000e+00,
                            5.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                            0.00000000e+00,  1.43000000e+02,  5.20000000e+01,  3.27000000e+02,
                            2.10000000e+02,  7.80000000e+01,  6.00000000e+00,  8.00000000e+00,
                            5.50000000e+01,  0.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                            1.00000000e+00,  4.72834860e+02,  6.59774017e+02,  3.31209957e+02,
                            4.76189639e+02,  5.41916272e+01,  1.07440528e+01,  7.98668232e+01,
                            5.53149960e+01,  2.04607019e+00,  1.70705367e+00,  1.15075842e+00,
                            1.12926230e+00,  9.73267135e-01,  3.79611009e-01,  1.39078354e+00,
                            7.15235178e-01,  2.56703159e+00,  1.02866896e+00,  2.35793270e+00,
                            1.46595126e+00,  1.87212994e+00,  8.54397913e-01,  2.03775782e+00,
                            1.42827260e+00,  1.11270996e+00,  1.73728135e+00,  9.51424845e-01,
                            1.76160748e+00,  1.10250950e+01,  6.32899741e+00,  1.54392024e+01,
                            1.19637782e+01, -1.39091792e-01, -3.08689430e+00, -2.33703901e-01,
                            8.67978904e-01])
quad_scores2 = np.array([364.,  10.,  10., 277.])

# quad_baseline3 is highest scoring with only discrete parameters, PortfolioDiscreteOnePlusOne with seed 456
quad_baseline3 = np.array([ 21.,   9.,   8.,  18.,  15.,   0.,   0.,   1.,   0., 141., 207.,
                           200., 315.,  16.,  12.,  69.,  44.,   1.,   0.,   0.,   0., 450.,
                           450., 450., 450., 120., 120., 120., 120.,   1.,   1.,   1.,   1.,
                             1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,
                             1.,   1.,   1.,   1.,   1.,  10.,   0.,   3.,   5.,   0.,  -2.,
                             3.,   5.])
quad_scores3 = np.array([410.,  10.,  10.,  10.])

# quad_baselin4 is the highest scoring from trim only using PortfolioDiscreteOnePlusOne with seed 123, and initial guesses for lqr/vel
quad_baseline4 = np.array([ 2.50000000e+01,  1.80000000e+01,  1.30000000e+01,  2.00000000e+00,
                            7.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,
                            1.00000000e+00,  3.09000000e+02,  2.20000000e+01,  4.00000000e+02,
                            2.70000000e+01,  4.30000000e+01,  5.50000000e+01,  8.00000000e+00,
                            5.50000000e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                            1.00000000e+00,  5.50000000e+02,  5.50000000e+02,  5.50000000e+02,
                            5.50000000e+02,  6.65177978e+01,  1.00000000e+02,  1.00000000e+02,
                            8.27374537e+01,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                            1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                            1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                            1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                            1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                            1.00000000e+00,  1.00000000e+01,  0.00000000e+00,  3.00000000e+00,
                            5.00000000e+00,  0.00000000e+00, -2.00000000e+00,  3.00000000e+00,
                            5.00000000e+00,  1.28970146e+00,  1.52500000e+00,  1.07627771e+00,
                            1.74267486e+00,  1.53256456e+00,  1.60004836e+00,  8.13264235e-01,
                            1.52500000e+00,  1.52500000e+00,  1.94745207e+00,  1.52500000e+00,
                            1.52500000e+00,  1.96436394e+00,  1.52500000e+00,  1.75760283e+00,
                            1.52500000e+00,  1.52500000e+00,  1.93815489e+00,  1.23748770e+00,
                            1.52500000e+00,  1.00000000e+01,  1.00000000e+01,  1.00000000e+01,
                            1.00000000e+01, -1.61717126e+00, -7.18937422e-02,  1.74344623e+00,
                           -3.21628960e+00])
quad_scores4 = np.array([-8904.86,  -128.22,     0.  , -7737.16,     0.  , -7341.88,
                         -30.  ,     0.  ])

# quad_baseline5 highest scoring from trim discrete only with PortfolioDiscreteOnePlusOne, initial guesses for lengths and lqr/vel
quad_baseline5 = np.array([ 2.50000000e+01,  1.80000000e+01,  1.30000000e+01,  2.00000000e+00,
                            7.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,
                            1.00000000e+00,  3.09000000e+02,  2.20000000e+01,  4.00000000e+02,
                            2.70000000e+01,  4.30000000e+01,  5.50000000e+01,  8.00000000e+00,
                            5.50000000e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                            1.00000000e+00,  6.00000000e+02,  6.00000000e+02,  6.00000000e+02,
                            6.00000000e+02,  1.20000000e+02,  1.20000000e+02,  1.20000000e+02,
                            1.20000000e+02,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                            1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                            1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                            1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                            1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                            1.00000000e+00,  1.00000000e+01,  0.00000000e+00,  3.00000000e+00,
                            5.00000000e+00,  0.00000000e+00, -2.00000000e+00,  3.00000000e+00,
                            5.00000000e+00,  5.50000000e+02,  5.50000000e+02,  5.50000000e+02,
                            5.50000000e+02,  6.65177978e+01,  1.00000000e+02,  1.00000000e+02,
                            8.27374537e+01,  1.28970146e+00,  1.52500000e+00,  1.07627771e+00,
                            1.74267486e+00,  1.53256456e+00,  1.60004836e+00,  8.13264235e-01,
                            1.52500000e+00,  1.52500000e+00,  1.94745207e+00,  1.52500000e+00,
                            1.52500000e+00,  1.96436394e+00,  1.52500000e+00,  1.75760283e+00,
                            1.52500000e+00,  1.52500000e+00,  1.93815489e+00,  1.23748770e+00,
                            1.52500000e+00,  1.00000000e+01,  1.00000000e+01,  1.00000000e+01,
                            1.00000000e+01, -1.61717126e+00, -7.18937422e-02,  1.74344623e+00,
                           -3.21628960e+00])
quad_scores5 = np.array([-8641.65,  -127.35,     0.  , -7476.17,     0.  , -7082.65,
                         -29.  ,     0.  ])

# quad_baseline6 is highest scoring after tuning arm length based on quad_baseline5 with CMA
quad_baseline6 = np.array([ 25.        ,  18.        ,  13.        ,   2.        ,
                             7.        ,   0.        ,   1.        ,   0.        ,
                             1.        , 309.        ,  22.        , 400.        ,
                            27.        ,  43.        ,  55.        ,   8.        ,
                            55.        ,   0.        ,   0.        ,   0.        ,
                             1.        , 464.64145263, 535.13813264, 457.4638442 ,
                           449.65284134,  63.51320652, 120.59789244,  65.68449722,
                           106.02177575,   1.        ,   1.        ,   1.        ,
                             1.        ,   1.        ,   1.        ,   1.        ,
                             1.        ,   1.        ,   1.        ,   1.        ,
                             1.        ,   1.        ,   1.        ,   1.        ,
                             1.        ,   1.        ,   1.        ,   1.        ,
                             1.        ,  10.        ,   0.        ,   3.        ,
                             5.        ,   0.        ,  -2.        ,   3.        ,
                             5.        ])
quad_scores6 = np.array([-9453.78,  -148.3 ,     0.  , -8281.68,     0.  , -7890.33,
                           -28.  ,     0.  ])

# quad_baseline7 is highest scoring after tuning lqr based on quad_baseline7 with CMA
quad_baseline7 = np.array([ 2.50000000e+01,  1.80000000e+01,  1.30000000e+01,  2.00000000e+00,
                            7.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,
                            1.00000000e+00,  3.09000000e+02,  2.20000000e+01,  4.00000000e+02,
                            2.70000000e+01,  4.30000000e+01,  5.50000000e+01,  8.00000000e+00,
                            5.50000000e+01,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                            1.00000000e+00,  6.00000000e+02,  6.00000000e+02,  6.00000000e+02,
                            6.00000000e+02,  1.20000000e+02,  1.20000000e+02,  1.20000000e+02,
                            1.20000000e+02,  9.74473240e-01,  9.66267710e-01,  1.00518954e+00,
                            1.00076505e+00,  1.02781842e+00,  1.00376934e+00,  1.01273410e+00,
                            9.97190026e-01,  9.66441992e-01,  1.03102243e+00,  2.49841950e-01,
                            1.35469642e-01,  2.29571731e-01,  1.43838062e-01,  4.69929417e-01,
                            1.16062707e-01,  3.21164280e+00,  7.03303768e+00,  4.61750507e+00,
                            3.49078712e+00,  1.50000000e+01,  1.40000000e+01,  0.00000000e+00,
                            2.80000000e+01,  0.00000000e+00,  0.00000000e+00, -2.00000000e+00,
                            0.00000000e+00])
quad_scores7 = np.array([410., 310., 410., 439.])

# quad_baseline8 is from high speed at turn -300
quad_baseline8 = np.array([ 2.10000000e+01,  1.00000000e+00,  1.20000000e+01,  0.00000000e+00,
        1.30000000e+01,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,
        1.00000000e+00,  4.10000000e+02,  2.47000000e+02,  1.75000000e+02,
        1.84000000e+02,  5.00000000e+01,  1.30000000e+01,  5.00000000e+01,
        5.00000000e+00,  0.00000000e+00,  0.00000000e+00,  1.00000000e+00,
        1.00000000e+00,  6.00000000e+02,  6.00000000e+02,  6.00000000e+02,
        6.00000000e+02,  1.20000000e+02,  1.20000000e+02,  1.20000000e+02,
        1.20000000e+02,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
        1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
        1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
        1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
        1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
        1.00000000e+00,  1.00000000e+01,  0.00000000e+00,  3.00000000e+00,
        5.00000000e+00,  0.00000000e+00, -2.00000000e+00,  3.00000000e+00,
        5.00000000e+00,  5.50000000e+02,  5.50000000e+02,  1.29220893e+02,
        5.50000000e+02,  5.46159976e+01,  8.96148178e+01,  1.00000000e+02,
        8.46072595e+01,  1.28970146e+00,  1.52500000e+00,  1.07627771e+00,
        1.74267486e+00,  1.53256456e+00,  1.60004836e+00,  8.13264235e-01,
        1.54932082e+00,  1.52500000e+00,  1.99429064e+00,  1.52500000e+00,
        1.38939631e+00,  1.96436394e+00,  1.52500000e+00,  1.70664361e+00,
        7.21097584e-01,  1.52500000e+00,  1.93815489e+00,  1.23748770e+00,
        1.52500000e+00,  1.00000000e+01,  1.00000000e+01,  1.00000000e+01,
        1.00000000e+01, -1.61717126e+00, -7.18937422e-02,  1.74344623e+00,
       -3.21628960e+00])
quad_scores8 = np.array([-6129.18,   -41.64,     0.  , -4971.72,     0.  , -4581.68,
         -40.  ,     0.  ])


# default hexring continous params
hexring_arm_lengths = 450.0 * np.ones(9, )
hexring_support_lengths = 60.0 * np.ones(6, )

# hexring baseline1 is highest scoring with PortfolioDiscreteOnePlusOne seed 456
hexring_baseline1 = np.array([ 2.30000000e+01,  1.40000000e+01,  1.70000000e+01,  1.40000000e+01,
                               6.00000000e+00,  3.00000000e+00,  2.00000000e+00,  1.00000000e+00,
                               1.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                               1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                               1.10000000e+02,  3.58000000e+02,  7.80000000e+01,  1.79000000e+02,
                               5.20000000e+01,  1.49000000e+02,  9.00000000e+00,  2.50000000e+01,
                               3.10000000e+01,  2.40000000e+01,  2.50000000e+01,  1.70000000e+01,
                               1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                               0.00000000e+00,  1.00000000e+00,  4.07012681e+02,  2.64371822e+02,
                               5.57818219e+02,  4.65365066e+02,  6.02678988e+02,  4.98141552e+02,
                               4.20132709e+02,  4.81602803e+02,  4.56164241e+02,  6.16287892e+01,
                               7.13784741e+01,  3.09162042e+01,  3.81486771e+01,  7.15068517e+01,
                               7.24131005e+01,  9.42443146e-01,  1.20195309e+00,  1.30662602e+00,
                               1.81151800e+00,  1.23729300e+00,  2.01361229e+00,  9.36063313e-01,
                               1.11032191e+00,  1.48535392e+00,  9.04854589e-01,  1.39844693e+00,
                               2.17836894e+00,  1.06961939e+00,  1.88993878e+00,  1.77330217e+00,
                               2.38121353e+00,  1.62370624e+00,  1.49270557e+00,  1.99891192e+00,
                               2.81879700e+00,  1.59848664e+01,  1.00000000e+01,  1.34364582e+01,
                               8.97167202e+00, -1.61946782e-01, -5.23129612e-01,  1.15548249e+00,
                              -2.43736024e+00])
hexring_scores1 = np.array([410., 310.,  10., 210.])

# hexring  baseline2 is highest scoring with discrete parameters only PortfolioDiscreteOnePlusOne seed 456
hexring_baseline2 = np.array([ 26.,   0.,   2.,   2.,  17.,  17.,  12.,   0.,   0.,   0.,   1.,
                                1.,   0.,   1.,   0.,   1., 188., 126., 127., 293.,   5., 175.,
                               12.,  57.,  13.,  22.,  72.,  74.,   1.,   1.,   1.,   0.,   1.,
                                0., 450., 450., 450., 450., 450., 450., 450., 450., 450.,  60.,
                               60.,  60.,  60.,  60.,  60.,   1.,   1.,   1.,   1.,   1.,   1.,
                                1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,   1.,
                                1.,   1.,   1.,  10.,   0.,   3.,   5.,   0.,  -2.,   3.,   5.])
hexring_scores2 = np.array([410.,  10.,  10.,  10.])

# hexring baseline 3 is highest scoring when warm started with baseline 1
hexring_baseline3 = np.array([23, 14, 17, 14, 6, 3, 2, 1, 1, 0, 0, 0, 1, 1, 1, 1, 110, 358, 78, 179, 52, 149, 9, 25, 
                              31, 24, 25, 17, 1, 1, 1, 1, 0, 1,
                              760.7963890738915, 164.7514335154692, 808.6432201271347,
                              607.6759576695658, 319.6060650872404, 904.5131031473162,
                              347.8759828772077, 532.6785237523176, 400.0680314514384,
                              41.62112773866239, 23.636805770332018, 60.19066085152068,
                              35.32287826214075, 5.5167084013996694, 96.76386014574099,
                              1.227396838421455, 0.16798798586739644, 1.2229128648546466,
                              1.900280973118931, 0.9121639876038874, 2.441906123241282,
                              0.9353927682466606, 1.4484572194602061, 2.6750547805588805,
                              1.205098686145651, 0.847912803401568, 1.680119394849692,
                              2.087097331597237, 1.8460375611336761, 1.620854610577231,
                              0.6847577253234111, 1.2524020126406128, 1.092086301498309,
                              2.6951864496494937, 1.9811416644022377, 13.037922040371033,
                              15.02835896998807, 18.31766593840914, 19.950366768454355,
                              4.0239543400206665, 4.061162488914569, 3.6490673788707313,
                              -1.829454232565404])
hexring_scores3 = np.array([410., 310.,  10., 390.])

# fast hexring is the fastest for -300 m turn
fast_hexring = np.array([ 1.90000000e+01,  7.00000000e+00,  6.00000000e+00,  1.00000000e+00,
                          1.00000000e+00,  3.00000000e+00,  0.00000000e+00,  1.00000000e+00,
                          0.00000000e+00,  0.00000000e+00,  1.00000000e+00,  0.00000000e+00,
                          0.00000000e+00,  0.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                          1.41000000e+02,  3.30000000e+02,  3.23000000e+02,  2.61000000e+02,
                          3.15000000e+02,  4.10000000e+01,  2.00000000e+00,  7.90000000e+01,
                          2.00000000e+00,  1.10000000e+01,  4.90000000e+01,  4.20000000e+01,
                          0.00000000e+00,  1.00000000e+00,  0.00000000e+00,  0.00000000e+00,
                          0.00000000e+00,  1.00000000e+00,  7.13538221e+02,  6.65941443e+02,
                          5.07488696e+02,  2.64983849e+02,  4.36181981e+02,  7.61578851e+02,
                          5.93949831e+02,  3.61461187e+02,  4.52565016e+02,  6.70773358e+01,
                          5.25262360e+01,  4.83528968e+01,  4.72498279e+01,  5.33312563e+01,
                          4.48333116e+01,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                          1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                          1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                          1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                          1.00000000e+00,  1.00000000e+00,  1.00000000e+00,  1.00000000e+00,
                          1.00000000e+00,  1.00000000e+01,  0.00000000e+00,  3.00000000e+00,
                          5.00000000e+00,  0.00000000e+00, -2.00000000e+00,  3.00000000e+00,
                          5.00000000e+00,  1.37891530e+00,  1.85428954e+00,  2.15282252e+00,
                          1.51291702e+00,  1.50085183e+00,  1.56345593e+00,  1.82174269e+00,
                          2.38961705e+00,  1.63038718e+00,  1.20637480e+00,  8.29768279e-01,
                          1.01901619e+00,  2.00229065e+00,  1.27785018e+00,  1.69468295e+00,
                          1.36112926e+00,  1.90937800e+00,  1.40756526e+00,  1.14704282e+00,
                          1.10052194e+00,  1.35670753e+01,  9.81914513e+00,  1.44435033e+01,
                          1.07701955e+01, -1.40754757e+00,  2.07346617e+00, -3.58120616e+00,
                          3.18773382e-01])
fast_hexring_scores = np.array([-931.88,  238.67,    0.  ,  127.18,    0.  ,  580.26,  -38.  ,
                                   0.  ])

# default hcopter continous params
hcopter_arm_lengths = np.array([100.0, 100.0, 210.0, 210.0, 210.0, 210.0])
hcopter_support_lengths = 320.0 * np.ones(4, )

hcopter_baseline1 = np.array([21, 15, 15, 5, 9, 0, 0, 0, 0, 0, 0, 300, 122, 206, 3, 12, 0, 48, 78, 0, 1, 1, 1, 100.0, 100.0, 210.0, 210.0, 210.0, 210.0, 320.0, 320.0, 320.0, 320.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 10.0, 0.0, 3.0, 5.0, 0.0, -2.0, 3.0, 5.0])
hcopter_scores1 = np.array([410.,  10.,  10.,  10.])

# default quad continous params
hcopter_arm_lengths = np.array([100., 100., 210., 210., 210., 210.])
hcopter_support_lengths = 320.0 * np.ones(4, )